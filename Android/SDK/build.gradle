plugins {

    id 'com.android.library'
    id 'kotlin-android'
}

android {

    compileSdkVersion 30

    defaultConfig {

        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {

            cmake {

                cppFlags ""
                arguments "-DANDROID_BUILD=TRUE", "-DANDROID_ARM_NEON=TRUE", "-DANDROID_STL=c++_shared"
            }
        }

        ndk {

            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            stl 'c++_shared'
        }
    }

    buildTypes {

        release {

            debuggable true
            minifyEnabled false

            externalNativeBuild {

                cmake {

                    arguments "-DCMAKE_BUILD_TYPE=RelWithDebInfo"
                }
            }
        }

        debug {

            debuggable true
            minifyEnabled false

            externalNativeBuild {

                cmake {

                    arguments "-DCMAKE_BUILD_TYPE=Debug"
                }
            }
        }
    }

    compileOptions {

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {

        jvmTarget = '1.8'
    }

    externalNativeBuild {

        cmake {

            path "../../Native/JNI/CMakeLists.txt"
        }
    }

    packagingOptions {

        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/*.kotlin_module'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.core:core-ktx:1.3.2"
    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "com.google.android.material:material:1.3.0"

    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.test.ext:junit:1.1.2"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.3.0"
}

private Object getConanBuildDir() {

    def parts = project.rootDir.getAbsolutePath().split(File.separator)
    def builder = new StringBuilder()

    for (int x = 0; x < parts.size() - 1; x++) {

        builder.append(parts[x]).append(File.separator)
    }

    def conanBuildDirRoot = builder.toString() + "Native/JNI"
    conanBuildDirRoot
}

task conanPrepare {

    Object conanBuildDirRoot = getConanBuildDir()

    android.defaultConfig.ndk.abiFilters.each {

        String arch = it
        android.buildTypes.each {

            def type = it.name
            File directory = new File("${conanBuildDirRoot}/conan-build-${type}-${arch}")

            if (directory.exists() && project.delete(directory.absolutePath)) {

                println("${directory.absolutePath} has been deleted")
            }
            if (directory.mkdirs()) {

                println("${directory.absolutePath} has been created")
            }
        }
    }
}

clean.finalizedBy(conanPrepare)