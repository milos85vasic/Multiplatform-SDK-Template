plugins {

    id 'com.android.library'
    id 'kotlin-android'
}

android {

    compileSdkVersion 30

    defaultConfig {

        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {

            cmake {

                cppFlags ""
                arguments "-DANDROID_BUILD=TRUE"
            }
        }

        ndk {

            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            stl 'c++_shared'
        }
    }

    buildTypes {

        release {

            debuggable true
            minifyEnabled false

            externalNativeBuild {

                cmake {

                    arguments "-DCMAKE_BUILD_TYPE=RelWithDebInfo"
                }
            }
        }

        debug {

            debuggable true
            minifyEnabled false

            externalNativeBuild {

                cmake {

                    arguments "-DCMAKE_BUILD_TYPE=Debug"
                }
            }
        }
    }

    compileOptions {

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {

        jvmTarget = '1.8'
    }

    externalNativeBuild {

        cmake {

            path "../../Native/JNI/CMakeLists.txt"
        }
    }

    packagingOptions {

        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/*.kotlin_module'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.core:core-ktx:1.3.2"
    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "com.google.android.material:material:1.3.0"

    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.test.ext:junit:1.1.2"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.3.0"
}

task conanInstall {

    def buildDir = new File("SDK")
    buildDir.mkdirs()

    android.defaultConfig.ndk.abiFilters.each {

        def arch = it

        def variants = ["debug", "release"]
        variants.each {

            def variant = it

            def cmd = "sh ./conanInstall.sh ${arch} ${variant}"
            print(">> ${cmd} \n")

            def sout = new StringBuilder(), serr = new StringBuilder()
            def proc = cmd.execute(null, buildDir)

            proc.consumeProcessOutput(sout, serr)
            proc.waitFor()
            println "$sout $serr"
            if (proc.exitValue() != 0) {

                throw new Exception("out:\n$sout\nerr:\n$serr\nCommand: ${cmd}")
            }
        }
    }
}

task conanPrepare {

    def buildDir = new File("SDK")
    buildDir.mkdirs()

    android.defaultConfig.ndk.abiFilters.each {

        def arch = it

        def variants = ["debug", "release"]
        variants.each {

            def variant = it

            def cmd = "sh ./conanPrepare.sh conanfile.txt .cxx/cmake/${variant}/${arch}"
            print(">> ${cmd} \n")

            def sout = new StringBuilder(), serr = new StringBuilder()
            def proc = cmd.execute(null, buildDir)

            proc.consumeProcessOutput(sout, serr)
            proc.waitFor()
            println "$sout $serr"
            if (proc.exitValue() != 0) {

                throw new Exception("out:\n$sout\nerr:\n$serr\nCommand: ${cmd}")
            }
        }
    }
}

clean.finalizedBy(conanPrepare)

build.dependsOn(conanInstall)